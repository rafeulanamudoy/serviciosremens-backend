datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  email                  String                   @unique
  socialLoginType        SOCIALLOGINTYPES         @default(EMAIL_PASSWORD)
  fullName               String
  phoneNumber            String?                  @unique
  role                   UserRole                 @default(TECHNICION)
  password               String?                  @default("")
  status                 UserStatus               @default(PENDING)
  country                String?
  city                   String?
  postalCode             String?
  expertise              EXPERTISE[]
  doc                    String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  profileImage           String                   @default("")
  sentMessages           PrivateMessage[]         @relation("SentMessages")
  receivedMessages       PrivateMessage[]         @relation("ReceivedMessages")
  user1Convarsion        Conversation[]           @relation("User1Convarsion")
  user2Convarsion        Conversation[]           @relation("User2Convarsion")
  admin                  Admin?
  Notifications          Notifications[]
  fcmToken               String?
  averageRating          Float                    @default(0)
  jobCompletationRate    Float                    @default(0)
  jobRejection           Int                      @default(0)
  assignJobs             assignJobs[]
  technicionAvailability technicionAvailability[]
  totalJobComplete       Int                      @default(0)
  rank                   Rank                     @default(NONE)
  rating                 rating[]
  Otp                    Otp[]
  jobCreate              jobCreate[]

  @@map("users")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  nickName String @unique
  password String
  email    String @unique
  userId   String @unique @db.ObjectId
  user     User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  otpCode   String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model PrivateMessage {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId       String       @db.ObjectId
  receiverId     String       @db.ObjectId
  content        String?
  imageUrl       String?
  conversationId String       @db.ObjectId
  read           Boolean      @default(false)
  sender         User?        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("private_messages")
}

model Conversation {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  user1Id        String             @db.ObjectId
  user2Id        String             @db.ObjectId
  lastMessage    String?
  user1          User?              @relation("User1Convarsion", fields: [user1Id], references: [id], onDelete: Cascade)
  user2          User?              @relation("User2Convarsion", fields: [user2Id], references: [id], onDelete: Cascade)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  status         ConversationStatus @default(ACTIVE)
  privateMessage PrivateMessage[]

  @@unique([user1Id, user2Id])
  @@map("conversations")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  body       String
  title      String
  user       User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notifications")
}

model technicionAvailability {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  month        String
  date         String[]
  slot         String[]
  area         String
  technicionId String   @db.ObjectId
  technicion   User     @relation(fields: [technicionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tecnicionAvailability")
}

model assignJobs {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  technicionId String @db.ObjectId
  technicion   User   @relation(fields: [technicionId], references: [id], onDelete: Cascade)

  jobId    String    @db.ObjectId
  job      jobCreate @relation(fields: [jobId], references: [id], onDelete: Cascade)
  expireAt DateTime?

  status    JobStutus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("assignJobs")
}

model jobCreate {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  customerName        String
  location            Json
  description         String
  serviceName         EXPERTISE
  acceptTechnicionId  String?   @db.ObjectId
  accepetedTechnicion User?     @relation(fields: [acceptTechnicionId], references: [id], onDelete: Cascade)

  scheduleTime DateTime
  status       JobStutus @default(PENDING)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  assignJobs assignJobs[]
  rating     rating[]
}

model rating {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  address      String
  rating       Float
  technicionId String    @db.ObjectId
  comment      String
  technicion   User      @relation(fields: [technicionId], references: [id], onDelete: Cascade)
  jobId        String    @db.ObjectId
  job          jobCreate @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rating")
}

enum Rank {
  NONE
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  PENDING
}

enum UserRole {
  ADMIN
  TECHNICION
}

enum JobStutus {
  PENDING
  ACTIVE
  COMPLETE
  CANCELLED
  DECLINE
  ACCEPT
}

enum BookingStatus {
  WAITING
  UPCOMING
  PAST
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}

enum ConversationStatus {
  ACTIVE
  DEACTIVE
}

enum SOCIALLOGINTYPES {
  GOOGLE
  EMAIL_PASSWORD
}

enum EXPERTISE {
  KITCHEN
  WATCHINE_MATCHINE
  BELL
  AIR_CONDITIONING
  FRIDGE
  ELECTRIC_WATER_HEATER
  GAS_WATER_HEATER
  QUICKIE
  WASH_DRY
  CAR_WASH_CENTER
}
